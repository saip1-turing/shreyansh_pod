name: Classify Changed JSON

on:
  pull_request:
    types: [opened, labeled, unlabeled, synchronize, reopened]
    branches:
      - main
      - workflows_LLM

jobs:
  classify-json:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          ignore_whitespace: true
          base_sha: ${{ github.event.pull_request.base.sha }}

      - name: Find single changed JSON file
        id: find-json
        run: |
          FILES="${{ steps.changed-files.outputs.all_changed_files }}"
          FILES=$(echo "$FILES" | tr -s ' ' | sed 's/^ *//;s/ *$//')

          read -ra FILE_ARRAY <<< "$FILES"
          COUNT=${#FILE_ARRAY[@]}

          echo "üîç Found $COUNT changed file(s)"
          for f in "${FILE_ARRAY[@]}"; do
            echo "  - $f"
          done

          if [[ "$COUNT" -ne 1 ]]; then
            echo "‚ùå PR must change exactly one file"
            exit 1
          fi

          FILE="${FILE_ARRAY[0]}"
          if [[ "${FILE}" != *.json ]]; then
            echo "‚ùå File is not a .json file: $FILE"
            exit 1
          fi

          echo "‚úÖ Found JSON file: $FILE"
          echo "json_file_path=$FILE" >> "$GITHUB_OUTPUT"

      - name: Show JSON content
        run: |
          echo "üìÇ Printing JSON file: ${{ steps.find-json.outputs.json_file_path }}"
          cat "${{ steps.find-json.outputs.json_file_path }}"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run classification
        run: |
          python classify.py "${{ steps.find-json.outputs.json_file_path }}" > result.txt
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

      - name: Decide pass/fail
        run: |
          echo "=== Classification Output ==="
          cat result.txt

          if grep -q "‚úÖ All checks passed." result.txt; then
            echo "‚úÖ All checks passed"
            exit 0
          else
            echo "‚ùå One or more checks failed"
            # Print fail reasons
            grep "‚ùå" result.txt || true
            exit 1
          fi
      
